name: CI

on:
  pull_request:

concurrency: ${{ github.workflow }} - ${{ github.ref }}


env:
  BRANCH_NAME: pr-${{ github.event.number }}-${{ github.actorÂ }}
  PLANETSCALE_SERVICE_TOKEN_ID: ${{ secrets.PLANETSCALE_SERVICE_TOKEN_ID }}
  PLANETSCALE_SERVICE_TOKEN: ${{ secrets.PLANETSCALE_SERVICE_TOKEN }}

jobs:
  test_api:
    name: Test Api
    runs-on: ubuntu-latest


    steps:
      - uses: actions/checkout@v3


      - name: Setup pscale
        uses: planetscale/setup-pscale-action@v1
        with:
          version: latest

      - name: Create a branch
        run: pscale branch create unkey $BRANCH_NAME --from=main --org=unkey --wait


      - name: Create a password
        id: database_password
        run: |
          res=$(pscale password create unkey $BRANCH_NAME password-name --role=admin --ttl=900 --debug --org=unkey --format=json)
          echo "DATABASE_HOST=$(echo $res | jq -r '.access_host_url')" >> "$GITHUB_OUTPUT"
          echo "DATABASE_USERNAME=$(echo $res | jq -r '.username')" >> "$GITHUB_OUTPUT"
          echo "DATABASE_PASSWORD=$(echo $res | jq -r '.plain_text')" >> "$GITHUB_OUTPUT"





      - uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-


      - name: Install dependencies
        run: |
          pnpm install
          npm i -g bun

      - name: Load Schema into MySQL
        run: pnpm drizzle-kit push:mysql
        working-directory: internal/db
        env:
          DRIZZLE_DATABASE_URL: 'mysql://${{ steps.database_password.outputs.DATABASE_USERNAME }}:${{ steps.database_password.outputs..DATABASE_PASSWORD }}@aws.connect.psdb.cloud/unkey?ssl={"rejectUnauthorized":true}'


      - name: Test
        run: bun test src/routes --coverage
        working-directory: apps/api
        env:
          DATABASE_HOST: ${{ steps.database_password.outputs.DATABASE_HOST }}
          DATABASE_USERNAME: ${{ steps.database_password.outputs.DATABASE_USERNAME }}
          DATABASE_PASSWORD: ${{ steps.database_password.outputs.DATABASE_PASSWORD }}
          UNKEY_ROOT_KEY: "not-empty" # this is not requried for these tests, but it is required for the env validation, I should fix this
      - name: Delete planetscale branch
        if: always()
        run: |
          pscale branch delete unkey $BRANCH_NAME --force --org=unkey


  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: lts/*

      - uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Format
        run: pnpm biome ci .

  test_nuxt:
    name: Test Nuxt
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - run: corepack enable
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "pnpm"

      - name: ðŸ“¦ Install dependencies
        run: pnpm install

      - name: ðŸ§ª Test project
        run: pnpm turbo test --filter=@unkey/nuxt
        env:
          NUXT_TEST_KEY: ${{secrets.NUXT_TEST_KEY}}

  tinybird:
    name: Tinybird CI
    concurrency: tinybird
    uses: tinybirdco/ci/.github/workflows/ci.yml@v1.1.8
    with:
      data_project_dir: ./internal/tinybird
    secrets:
      admin_token: ${{ secrets.TINYBIRD_ADMIN_TOKEN }} # set admin token associated to an account in GitHub secrets
      tb_host: https://api.tinybird.co

  build_packages:
    strategy:
      matrix:
        package: ["@unkey/api", "@unkey/nextjs", "@unkey/hono", "@unkey/nuxt"]
    name: Build ${{matrix.package}}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: lts/*

      - uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install
        run: pnpm install

      - name: Build packages
        run: pnpm turbo run build --filter=${{matrix.package}}
